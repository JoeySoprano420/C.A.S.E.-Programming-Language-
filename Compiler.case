Fn main () (
  Print "C.A.S.E. Compiler v3 — Self-Hosting Bootstrap" [end]

  ; Step 1 – Read source file
  let src = call read_file "input.case" [end]

  ; Step 2 – Tokenize
  let tokens = call lex src [end]
  Print "Lexing complete." [end]

  ; Step 3 – Parse
  let ast = call parse tokens [end]
  Print "Parsing complete." [end]

  ; Step 4 – Generate IR
  let ir = call gen_ir ast [end]
  Print "IR generated." [end]

  ; Step 5 – Emit Assembly
  call codegen ir [end]
  Print "Assembly emitted to output.asm" [end]

  ret 0
) [end]


; ======================================================
;  LEXER
; ======================================================
Fn lex "string src" (
  let tokens = []
  let word = ""
  loop "i = 0; i < len(src); i++" {
    let ch = src[i]

    if ch == '"' {
      let s = ""
      let j = i + 1
      loop "j < len(src)" {
        if src[j] == '"' { break [end] }
        s = s + src[j]
        j = j + 1
      } [end]
      append tokens, ("STRING", s)
      i = j
    } else if is_alpha(ch) {
      word = word + ch
      if not is_alpha(src[i+1]) {
        append tokens, ("IDENT", word)
        word = ""
      } [end]
    } else if is_digit(ch) {
      let n = ""
      loop "k = i; k < len(src) && is_digit(src[k]); k++" {
        n = n + src[k]
      } [end]
      append tokens, ("NUMBER", n)
    } else if ch == '(' { append tokens, ("LPAREN","(") }
    else if ch == ')' { append tokens, ("RPAREN",")") }
    else if ch == '{' { append tokens, ("LBRACE","{") }
    else if ch == '}' { append tokens, ("RBRACE","}") }
    else if ch == '+' { append tokens, ("PLUS","+") }
    else if ch == '-' { append tokens, ("MINUS","-") }
  } [end]
  ret tokens
) [end]


; ======================================================
;  PARSER
; ======================================================
Fn parse "tokens" (
  let ast = []
  let i = 0
  loop "i < len(tokens)" {
    let t = tokens[i]
    if t[0] == "IDENT" && t[1] == "Fn" {
      let name = tokens[i+1][1]
      let body = parse_block tokens, i+2
      append ast, ("FUNCTION", name, body)
    } else if t[0] == "IDENT" && t[1] == "Print" {
      let val = tokens[i+1][1]
      append ast, ("PRINT", val)
    } [end]
    i = i + 1
  } [end]
  ret ast
) [end]


Fn parse_block "tokens, start" (
  let block = []
  let i = start
  loop "i < len(tokens)" {
    if tokens[i][1] == ")" { break [end] }
    if tokens[i][1] == "Print" {
      let v = tokens[i+1][1]
      append block, ("PRINT", v)
    } [end]
    i = i + 1
  } [end]
  ret block
) [end]


; ======================================================
;  IR GENERATOR
; ======================================================
Fn gen_ir "ast" (
  let ir = []
  loop "n = 0; n < len(ast); n++" {
    let node = ast[n]
    if node[0] == "PRINT" {
      append ir, ("WRITE", node[1])
    } else if node[0] == "FUNCTION" {
      append ir, ("LABEL", node[1])
      loop "k = 0; k < len(node[2]); k++" {
        let c = node[2][k]
        if c[0] == "PRINT" {
          append ir, ("WRITE", c[1])
        } [end]
      } [end]
      append ir, ("RET")
    } [end]
  } [end]
  ret ir
) [end]


; ======================================================
;  CODE GENERATION
; ======================================================
Fn codegen "ir" (
  Print "section .data" [end]
  loop "i = 0; i < len(ir); i++" {
    let op = ir[i][0]
    if op == "WRITE" {
      let msg = ir[i][1]
      Print "msg db \"" + msg + "\"" [end]
      Print "msglen equ $-msg" [end]
    } [end]
  } [end]

  Print "section .text" [end]
  Print "global _start" [end]
  Print "_start:" [end]
  loop "i = 0; i < len(ir); i++" {
    let op = ir[i][0]
    if op == "WRITE" {
      Print "  mov rax,1" [end]
      Print "  mov rdi,1" [end]
      Print "  lea rsi,[rel msg]" [end]
      Print "  mov rdx,msglen" [end]
      Print "  syscall" [end]
    } else if op == "RET" {
      Print "  mov rax,60" [end]
      Print "  xor rdi,rdi" [end]
      Print "  syscall" [end]
    } [end]
  } [end]
  ret 0
) [end]


; ======================================================
;  FILE IO HELPERS (bootstrap)
; ======================================================
Fn read_file "filename" (
  ; Placeholder: replaced in self-hosted version by CIAM read
  Print "Reading file..." [end]
  ret "Print \"Hello from input.case\" [end]"
) [end]
