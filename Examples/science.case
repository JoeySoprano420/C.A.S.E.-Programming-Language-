# ==========================================================
# 🌌  C.A.S.E. SCIENTIFIC CORE SUITE
# ----------------------------------------------------------
# Combines numeric registry, CIAM scientific library,
# precision overlays, quadratic solver, and visualization.
# ==========================================================

@type float
@scientific
@overlay base12

# -------------------------------
# Numeric Conversions & Classes
# -------------------------------

Fn toInt "double val" ( ret (int)val ) [end]
Fn toFloat "int val" ( ret (float)val ) [end]

Fn complexAdd "double aReal, double aImag, double bReal, double bImag" (
  let realSum = aReal + bReal
  let imagSum = aImag + bImag
  Print "Complex Sum = " [end]
  Print realSum [end]
  Print " + " [end]
  Print imagSum [end]
  Print "i" [end]
) [end]

Fn toRational "double num, double den" (
  if den == 0 {
    Print "⚠️  Undefined rational (denominator = 0)" [end]
    ret 0
  } else { ret num / den } [end]
) [end]

# -------------------------------
# CIAM Scientific Wrappers
# -------------------------------

CIAM sinValue { ret sin(arg) } [end]
CIAM cosValue { ret cos(arg) } [end]
CIAM tanValue { ret tan(arg) } [end]
CIAM expValue { ret exp(arg) } [end]
CIAM logValue { ret log(arg) } [end]
CIAM sqrtValue { ret sqrt(arg) } [end]

# -------------------------------
# Precision Overlays
# -------------------------------

@overlay base12
Fn toBase12 "int value" (
  let symbols = "0123456789ab"
  let out = ""
  let n = value
  if n == 0 { ret "0" }
  while n > 0 {
    let digit = n % 12
    out = substring symbols digit (digit+1) + out
    n = n / 12
  } [end]
  ret out
) [end]

@overlay scientific
Fn toScientific "double value" (
  let exp = 0
  let num = value
  while num >= 10 { num = num / 10; exp = exp + 1 } [end]
  while num < 1 && num > 0 { num = num * 10; exp = exp - 1 } [end]
  Print "Scientific Notation: " [end]
  Print num [end]
  Print " ×10^" [end]
  Print exp [end]
) [end]

# -------------------------------
# Quadratic Equation Solver
# -------------------------------

Fn solveQuadratic "double a, double b, double c" (
  Print "📐  Solving ax² + bx + c = 0" [end]
  let D = (b*b) - (4*a*c)
  Print "Discriminant = " [end]
  if D > 0 {
    let r1 = (-b + sqrt(D)) / (2*a)
    let r2 = (-b - sqrt(D)) / (2*a)
    Print "Two real roots:" [end]
    Print "x₁ = " [end]
    Print "x₂ = " [end]
  } else if D == 0 {
    let r = (-b)/(2*a)
    Print "One repeated root: " [end]
    Print "x = " [end]
  } else {
    let rp = (-b)/(2*a)
    let ip = sqrt(-D)/(2*a)
    Print "Complex roots:" [end]
    Print "x₁ = " [end]
    Print "x₂ = " [end]
  } [end]
  Print "Equation solved." [end]
) [end]

# -------------------------------
# Graph and Table Visualizers
# -------------------------------

Fn plotGraph "double yValue" (
  Print "📊  Plotting sample graph..." [end]
  let width  = 20
  let height = 5
  loop "int row = height; row >= -height; row--" {
    let line = ""
    loop "int col = -width; col <= width; col++" {
      if col == 0 && row == 0 { line = line + "+" }
      else if col == 0 { line = line + "|" }
      else if row == 0 { line = line + "-" }
      else { line = line + " " }
    } [end]
    Print line [end]
  } [end]
  Print "Graph render complete (symbolic grid)." [end]
) [end]

Fn showTable "double value" (
  Print "📋  Generating data table..." [end]
  Print "+-----------+-----------+" [end]
  Print "|   Term    |   Value   |" [end]
  Print "+-----------+-----------+" [end]
  Print "|   1st     |   " + value + "   |" [end]
  Print "|   2nd     |   " + (value*2) + "   |" [end]
  Print "|   3rd     |   " + (value*3) + "   |" [end]
  Print "+-----------+-----------+" [end]
  Print "Table render complete." [end]
) [end]

# -------------------------------
# Demonstration & Integration
# -------------------------------

Fn demoScience () (
  Print "🌐  Running C.A.S.E. Scientific Core Demo..." [end]

  # Numeric conversions
  let i = call toInt 3.99 [end]
  let f = call toFloat 42 [end]
  call complexAdd 2 3 4 5 [end]
  let r = call toRational 3 4 [end]

  # Precision overlays
  call toBase12 144 [end]
  call toScientific 98765.4321 [end]

  # CIAM operations
  let deg = 60.0
  let rad = deg * 3.141592653589793 / 180.0
  let s   = sinValue(rad)
  let c   = cosValue(rad)
  let e   = expValue(1)
  let l   = logValue(10)

  # Equation solving
  call solveQuadratic 1 -3 2 [end]

  # Visualization
  call plotGraph 0 [end]
  call showTable r [end]

  Print "✅  C.A.S.E. Scientific Core demonstration complete." [end]
) [end]

call demoScience [end]
