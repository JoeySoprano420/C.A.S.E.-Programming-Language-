# ----------------------------------------------------------
#  NUMERIC MODULE ‚Äî type registry and conversion helpers
# ----------------------------------------------------------

@type int
Fn toInt "double val" (
  ret (int)val
) [end]

@type float
Fn toFloat "int val" (
  ret (float)val
) [end]

@type complex
Fn complexAdd "double aReal, double aImag, double bReal, double bImag" (
  let realSum = aReal + bReal
  let imagSum = aImag + bImag
  Print "Complex Sum = " [end]
  Print realSum [end]
  Print " + " [end]
  Print imagSum [end]
  Print "i" [end]
) [end]

@type rational
Fn toRational "double num, double den" (
  if den == 0 {
    Print "‚ö†Ô∏è  Undefined rational (denominator = 0)" [end]
    ret 0
  } else {
    ret num / den
  } [end]
) [end]

Fn testNumericSystem () (
  Print "üß©  Numeric type registry test..." [end]
  let i = call toInt 3.14 [end]
  let f = call toFloat 42 [end]
  call complexAdd 2 3 4 5 [end]
  let r = call toRational 3 4 [end]
  Print "Numeric type system test complete." [end]
) [end]
